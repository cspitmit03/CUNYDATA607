";Server=",server.name,
";Port=",port,
";PROTOCOL=TCPIP",
";UID=", user.name,
";PWD=",pwd,sep="")
con1 <- odbcDriverConnect(con.text)
con.text <- paste("DRIVER=",driver.name,
";Database=",db.name,
";Server=",server.name,
";Port=",port,
";PROTOCOL=TCPIP",
";UID=", user.name,
";PWD=",pwd,sep="")
con1 <- odbcDriverConnect(con.text)
bcp <- odbcConnect("404-sql1.vm.epicservers.com", uid=user.name, pwd=pwd)
orders <- sqlQuery(bcp, "
SELECT * FROM dbo.orders
where OrderDate>='2/15/2017")
head(orders)
orders <- sqlQuery(bcp, "
SELECT * FROM dbo.orders
where OrderDate>='2/15/2017'")
View(orders)
View(orders)
library(iris)
iris
library(e1071)
install.packages("e1071")
library(e1071)
attach(iris)
x <- subset(iris, select=-Species)
y <- Species
x
y
svm_model <- svm(Species ~ ., data=iris)
summary(svm_model)
odbcCloseAll
odbcClose(bcp)
library(RODBC)
driver.name <- "SQL Server"
db.name <- "AndorraReporting"
host.name <- "404-sql1.vm.epicservers.com\\SQL1"
port <-""
server.name <- "SQL1"
user.name <-"Andorra_sa"
pwd <- "And@13579"
AR <- odbcConnect("404-sql1.vm.epicservers.com", uid=user.name, pwd=pwd)
Downline <- sqlQuery(AR, "
SELECT * FROM dbo.SVM
")
library(e1701)
x <- subset(Downline, select=-CustomerStatusID)
y <- CustomerStatusID
svm_model <- svm(CustomerStatusID ~ ., data=Downline)
summary(svm_model)
library(e1071)
attach(Downline)
x <- subset(Downline, select=-CustomerStatusID)
y <- CustomerStatusID
x
y
x <- subset(Downline, select=-CustomerStatusID)
y <- CustomerStatusID
svm_model <- svm(CustomerStatusID ~ ., data=Downline)
summary(svm_model)
```
View(Downline)
View(Downline)
Downline <- sqlQuery(AR, "
SELECT * FROM dbo.SVM
")
library(e1071)
attach(Downline)
x <- subset(Downline, select=-CustomerStatusID)
y <- CustomerStatusID
svm_model <- svm(CustomerStatusID ~ ., data=Downline)
summary(svm_model)
svm_model1 <- svm(x,y)
summary(svm_model1)
svm_model
pred <- predict(svm_model1,x)
system.time(pred <- predict(svm_model1,x))
pred <- predict(svm_model,x)
system.time(pred <- predict(svm_model,x))
table(pred,y)
head(table(pred,y))
AR <- odbcConnect("404-sql1.vm.epicservers.com", uid=user.name, pwd=pwd)
Downline <- sqlQuery(AR, "
SELECT * FROM dbo.SVM
where CustomerStatusID in (1,2)
")
attach(Downline)
x <- subset(Downline, select=-CustomerStatusID)
y <- CustomerStatusID
svm_model <- svm(CustomerStatusID ~ ., data=Downline)
summary(svm_model)
pred <- predict(svm_model,x)
system.time(pred <- predict(svm_model,x))
head(table(pred,y))
svm_tune <- tune(svm, train.x=x, train.y=y,
kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
Downline <- sqlQuery(AR, "
SELECT * FROM dbo.SVM
where CustomerStatusID <> 'Other'
")
View(Downline)
View(Downline)
attach(Downline)
x <- subset(Downline, select=-CustomerStatusID)
y <- CustomerStatusID
y
svm_model <- svm(CustomerStatusID ~ ., data=Downline)
summary(svm_model)
svm_model1 <- svm(x,y)
summary(svm_model1)
pred <- predict(svm_model,x)
system.time(pred <- predict(svm_model,x))
head(table(pred,y))
svm_tune <- tune(svm, train.x=x, train.y=y,
kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
View(Downline)
View(Downline)
Downline <- Downline[c(2:11)]
x <- subset(Downline, select=-CustomerStatusID)
y <- CustomerStatusID
svm_model <- svm(CustomerStatusID ~ ., data=Downline)
summary(svm_model)
pred <- predict(svm_model,x)
system.time(pred <- predict(svm_model,x))
head(table(pred,y))
svm_tune <- tune(svm, train.x=x, train.y=y,
kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
svm_tune <- tune(svm_model1, train.x=x, train.y=y,
kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
svm_tune <- tune(svm, train.x=x, train.y=y,
kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
new <- Downline[c(2,8,9)]
View(new)
View(new)
library(tree)
install.packages("tree")
library(tree)
tree1<-tree(CustomerStatusID ~ AMBvol+ APE, data = new)
summary(tree1)
plot(tree1)
text(tree1)
library(mlbench)
install.packages(mlbench)
install.packages("caret")
library("mlbench")
library(caret)
cor(Downline)
cor(Downline[,2:10])
cor(Downline[,3:10])
DownlineNumeric <- Downline[,3:10]
data(DownlineNumeric)
data(DownlineNumeric)
DownlineNumeric
control<-trainControl(method="repeatedcv", number=10, repeats=3)
control
attach(Downline)
model <- train(CustomerStatusID~., data=Downline, method="lvq", preProcess="scale", trControl=control)
model <- train(Months~., data=DownlineNumeric, method="lvq", preProcess="scale", trControl=control)
head(DownlineNumeric)
model <- train(months~., data=DownlineNumeric, method="lvq", preProcess="scale", trControl=control)
data(PimaIndiansDiabetes)
install.packages("FSelector")
install.packages("mlbench")
install.packages("FSelector")
install.packages("RWeka")
install.packages("RWekajars")
install.packages("RWeka")
install.packages("FSelector")
library(FSelector)
library(ggplot2)
new
head(new)
qplot(APE, AMBvol, data=new, colour=CustomerStatusID, size=I(4))
qplot(APE, AMBvol, data=Downline, colour=CustomerStatusID, size=I(4))
qplot(APE, MainCountry, data=Downline, colour=CustomerStatusID, size=I(4))
qplot(APE, maxrank, data=Downline, colour=CustomerStatusID, size=I(4))
qplot(APE, Stotcust, data=Downline, colour=CustomerStatusID, size=I(4))
qplot(APE, Stotcust, data=Downline, colour=maxrank, size=I(4))
qplot(APE, Atotcust, data=Downline, colour=maxrank, size=I(4))
qplot(APE, Atotcust, data=Downline, colour=CustomerStatusID, size=I(4))
qplot(APE, AHighKit, data=Downline, colour=CustomerStatusID, size=I(4))
qplot(AMVtot, AHighKit, data=Downline, colour=CustomerStatusID, size=I(4))
qplot(AMVtot, APE, data=Downline, colour=CustomerStatusID, size=I(4))
qplot(AMVtot, MainCountry, data=Downline, colour=CustomerStatusID, size=I(4))
AR <- odbcConnect("404-sql1.vm.epicservers.com", uid=user.name, pwd=pwd)
Downline <- sqlQuery(AR, "
SELECT * FROM dbo.SVM
where CustomerStatusID <> 'Other'
")
qplot(AMVtot, MainCountry, data=Downline, colour=CustomerStatusID, size=I(4))
qplot(APE, AHighKit, data=Downline, colour=CustomerStatusID, size=I(4))
Downline <- Downline[c(2:11)]
x <- subset(Downline, select=-CustomerStatusID)
y <- CustomerStatusID
svm_model <- svm(CustomerStatusID ~ ., data=Downline)
summary(svm_model)
pred <- predict(svm_model,x)
system.time(pred <- predict(svm_model,x))
head(table(pred,y))
AR <- odbcConnect("404-sql1.vm.epicservers.com", uid=user.name, pwd=pwd)
Downline <- sqlQuery(AR, "
SELECT * FROM dbo.SVM
where CustomerStatusID <> 'Other'
")
odbcClose(AR)
attach(Downline)
Downline <- Downline[c(2:11)]
x <- subset(Downline, select=-CustomerStatusID)
y <- CustomerStatusID
svm_model <- svm(CustomerStatusID ~ ., data=Downline)
summary(svm_model)
pred <- predict(svm_model,x)
system.time(pred <- predict(svm_model,x))
head(table(pred,y))
qplot(APE, AHighKit, data=Downline, colour=CustomerStatusID, size=I(4))
qplot(APE, AHighKit, data=Downline, colour=CustomerStatusID, size=I(2))
qplot(APE, AHighKit, data=Downline, colour=CustomerStatusID, size=I(1))
head(downline)
head(Downline)
Dtree <- Downline[c(2:10)]
head(Dtree)
tree1<-tree(CustomerStatusID ~ maxrank + months + Stotcust + Atotcust + AHighKit + APE + AMBvol + AMVtot, data=Dtree)
summary(tree1)
plot(tree1)
text(tree1)
install.packages(htmltab)
install.packages("htmltab")
install.packages("htmlTable")
URL <- "https://www.bls.gov/news.release/empsit.t19.htm"
Project6DS3 <- htmltab(doc = url, which = "//th[text() = 'Industry']/ancestor::table")
head(Project6DS3)
library(htmltab)
Project6DS3 <- htmltab(doc = url, which = "//th[text() = 'Industry']/ancestor::table")
head(Project6DS3)
Project6DS3 <- htmltab(doc = URL, which = "//th[text() = 'Industry']/ancestor::table")
head(Project6DS3)
Project6DS3 <- htmltab(doc = URL, which = "//th[text() = 'Industry']/industry::table")
head(Project6DS3)
kable(head(Project6DS3), caption = "Table 1. Unitdy Data")
library(tidyr)
library(dplyr)
library(stringr)
library(knitr)
library(htmltab)
kable(head(Project6DS3), caption = "Table 1. Unitdy Data")
library(tidyr)
library(dplyr)
library(stringr)
library(knitr)
library(htmltab)
URL <- "https://www.bls.gov/news.release/empsit.t19.htm"
Project6DS3 <- htmltab(doc = URL, which = "//th[text() = 'Industry']/industry::table")
head(Project6DS3)
kable(head(Project6DS3), caption = "Table 1. Unitdy Data")
gather(Project6DS3, key, value, -Industry)
Project6DS3 <- gather(Project6DS3, key, value, -Industry)
head(Project6DS3)
Project6DS3<-tbl_df(Project6DS3)
head(Project6DS3)
Project6DS3 <- htmltab(doc = URL, which = "//th[text() = 'Industry']/ancestor::table")
head(Project6DS3)
Project6DS3 <- gather(Project6DS3, key, value, -Industry)
Project6DS3a <- Project6DS3  %>% separate(Project6DS3, key, into = c("Average hourly earnings", "Average weekly earnings"), sep = " >> ")
Project6DS3  %>% separate(Project6DS3, key, into = c("Average hourly earnings", "Average weekly earnings"), sep = " >> ")
Project6DS3  %>% separate(Project6DS3, key, into = c("Average hourly earnings", "Average weekly earnings"), sep = ">>")
head(Project6DS3)
Project6DS3  %>% separate(Project6DS3, key, into = c("Metric", "Period"), sep = " >> ")
Project6DS3 <- gather(Project6DS3, key, value, -Industry)
head(Project6DS3)
URL <- "https://www.bls.gov/news.release/empsit.t19.htm"
Project6DS3 <- htmltab(doc = URL, which = "//th[text() = 'Industry']/ancestor::table")
head(Project6DS3)
gather(Project6DS3, key, value, -Industry)
Project6DS3 <- gather(Project6DS3, key, value, -Industry)
Project6DS3 %>% separate(Project6DS3, key, into = c("Metric", "Period"), sep = " >> ")
Project6DS3 %>% separate(key, into = c("Metric", "Period"), sep = " >> ")
Project6DS3a <- Project6DS3 %>% separate(key, into = c("Metric", "Period"), sep = " >> ")
head(Project6DS3)
head(Project6DS3a)
library(tidyr)
library(dplyr)
library(stringr)
library(knitr)
library(RMySQL)
con <- dbConnect(RMySQL::MySQL(),
dbname = "CUNY607",
host = "localhost",
port = 3306,
user = "root",
password = "CUNYDATA")
table_names <- dbListTables(con)
Project6DS2 <- dbReadTable(con, "Project2DS2")
kable(head(Project6DS2), caption = "Table 1. Unitdy Data")
Project6DS3a %>% group_by(Industry, Metric) %>% spread(Period, value)
head(Project6DS3a)
Project6DS3a[, c(4)] <- sapply(Project6DS3a[, c(4)], as.numeric)
head(Project6DS3a)
Project6DS3a %>% mutate(`value` = str_replace(`value`, "$", ""))
head(Project6DS3)
sapplye(Project6DS3, typeof)
sapply(Project6DS3, typeof)
Project6DS3 <- gather(Project6DS3, key, value, -Industry)
head(Project6DS3)
URL <- "https://www.bls.gov/news.release/empsit.t19.htm"
Project6DS3 <- htmltab(doc = URL, which = "//th[text() = 'Industry']/ancestor::table")
head(Project6DS3)
kable(head(Project6DS3), caption = "Table 1. Unitdy Data")
Project6DS3 <- gather(Project6DS3, key, value, -Industry)
head(Project6DS3)
Project6DS3 %>% mutate(`value` = str_replace(`value`, "$", ""))
gsub("$","",ProjectDS3[,4])
gsub("$","",Project6DS3[,4])
gsub("$","",Project6DS3[,3])
Project6DS3[,3] <- gsub("$","",Project6DS3[,3])
head(Project6DS3)
head(Project6DS3[,3])
head(gsub("$","",Project6DS3[,3]))
tail(Project6DS3[,3])
head(gsub("$","",Project6DS3[,3]))
head(gsub("$","",Project6DS3$value))
Project6DS3
head(gsub("\$","",Project6DS3[,3]))
head(gsub("\\$","",Project6DS3[,3]))
Project6DS3[,3] <- gsub("\\$","",Project6DS3[,3])
Project6DS3
Project6DS3a <- Project6DS3 %>% separate(key, into = c("Metric", "Period"), sep = " >> ")
Project6DS3a[, c(4)] <- sapply(Project6DS3a[, c(4)], as.numeric)
Project6DS3[,3] <- gsub("\\$","",Project6DS3[,3])
Project6DS3a <- Project6DS3 %>% separate(key, into = c("Metric", "Period"), sep = " >> ")
head(Project^DS3a)
head(Project6DS3a)
sapply(Project6DS3a[, c(4)], as.numeric)
Project6DS3a[, c(4)]
Project6DS3[,3] <- gsub("\\,","",Project6DS3[,3])
Project6DS3a[, c(4)]
as.numeric(gsub(",","",Project6DS3[,3]))
URL <- "https://www.bls.gov/news.release/empsit.t19.htm"
Project6DS3 <- htmltab(doc = URL, which = "//th[text() = 'Industry']/ancestor::table")
head(Project6DS3)
kable(head(Project6DS3), caption = "Table 1. Unitdy Data")
Project6DS3 <- gather(Project6DS3, key, value, -Industry)
#remove the $ before converting to numeric for anlaysis.
Project6DS3[,3] <- gsub("\\$","",Project6DS3[,3])
#remove the commas and convert to numeric
Project6DS3[,3] <- as.numeric(gsub(",","",Project6DS3[,3]))
Project6DS3[,3]
Project6DS3a <- Project6DS3 %>% separate(key, into = c("Metric", "Period"), sep = " >> ")
Project6DS3a <- Project6DS3a %>% group_by(Industry, Metric) %>% spread(Period, value)
head(Project6DS3a)
colnames(Project6DS3a) <- str_to_title(colnames(Project6DS3a))
head(Project6DS3a)
kable(head(Project6DS3a), caption="Table 2. Data Cleaned Up and Inverted for Analysis")
Project6DS3a[, which(Project6DS3a$Metric==`Average hourly earnings`)]
Project6DS3a[, which(Project6DS3a$Metric=='Average hourly earnings')]
subset(Project6DS3a, Metric=="Average hourly earnings")
subset(Project6DS3a, Metric=="Average weekly earnings")
AvgHourly <- subset(Project6DS3a, Metric=="Average hourly earnings")
AvgWeekly <- subset(Project6DS3a, Metric=="Average weekly earnings")
group_by(Project6DS3a, Metric) %>% mutate_each(funs(./mean,-Industry))
group_by(Project6DS3a, Metric) %>% mutate_each(funs(mean),-Industry))
group_by(Project6DS3a, Metric) %>% mutate_each(funs(mean),-Industry)
head(Project6DS3a)
Project6DS3a %>% group_by(Metric) %>% mutate(`Feb.2017(P)` = normalit(`Feb.2017(P)`))
normalit<-function(m){
(m - min(m))/(max(m)-min(m))
}
Project6DS3a %>% group_by(Metric) %>% mutate(`Feb.2017(P)` = normalit(`Feb.2017(P)`))
write.table(Project6DS3a, file="CSVtable")
write.table(Project6DS3a, file="CSVtable.csv")
write.csv(Project6DS3a, file=CSVtable.csv)
write.csv(Project6DS3a, file=CSVtable.csv)
View(Project6DS3a)
View(Project6DS3a)
Project6DS3a %>% group_by(Metric) %>% mutate(`Feb.2017(P)` = normalit(`Feb.2017(P)`), `Jan.2017(P)` = normalit(`Jan.2017(P)`), `Dec.2016` = normalit(`Dec.2016`), `Feb.2016` = normalit(`Feb.2016`))
Project6DS3b <- Project6DS3a %>% group_by(Metric) %>% mutate(`Feb.2017(P)` = normalit(`Feb.2017(P)`), `Jan.2017(P)` = normalit(`Jan.2017(P)`), `Dec.2016` = normalit(`Dec.2016`), `Feb.2016` = normalit(`Feb.2016`))
AvgHourly <- subset(Project6DS3b, Metric=="Average hourly earnings")
AvgWeekly <- subset(Project6DS3b, Metric=="Average weekly earnings")
boxplot(AvgHourly)
boxplot(AvgHourly[,c(3:6)])
par(c(1,2))
mfar(c(1,2))
boxplot(AvgHourly[,c(3:6)],main="Boxplot of Average Hourly", ylab="Normalized Earnings for All Industries", xlab="Periods")
install.packages(jsonr)
install.packages("rjson")
install.packages("jsonlite")
getwed()
getwd()
cd "/Users/cesarespitia/Documents/CUNYMSDA/DATA 607/CUNYDATA607/Week 7"
setwd() "/Users/cesarespitia/Documents/CUNYMSDA/DATA 607/CUNYDATA607/Week 7"
setwd("/Users/cesarespitia/Documents/CUNYMSDA/DATA 607/CUNYDATA607/Week 7")
getwd()
library(jsonlite)
winners <- fromJSON("CesarBooks.json", flatten=TRUE)
library(jsonlite)
winners <- fromJSON("CesarBooks.json", flatten=TRUE)
winners
colnames(winners)
typeof(winners)
library(jsonlite)
JSONBooks <- fromJSON("CesarBooks.json", flatten=TRUE)
colnames(JSONBooks)
install.packages("XML")
library(XML)
library(jsonlite)
library(XML)
XMLBooks=xmlParse("CesarBooks.xml")
class(XMLBooks)
class(JSONBooks)
colnames(XMLBooks)
HTMLBooks = htmlTreeParse('CesarBooks.html',
useInternal = TRUE)
HTMLBooks
unlist(xpathApply(HTMLBooks, '//tr', xmlValue))
HTMLBooks = htmlTreeParse('CesarBooks.html',
useInternal = TRUE)
HTMLBooks = unlist(xpathApply(HTMLBooks, '//tr', xmlValue))
# Replace all \n by spaces
HTMLBooks = gsub('\\n', ' ', HTMLBooks)
HTMLBooks = gsub('\\r', ' ', HTMLBooks)
HTMLBooks
HTMLBooks = gsub('\\t', ' ', HTMLBooks)
HTMLBooks
HTMLBooks = gsub('\\"', ' ', HTMLBooks)
HTMLBooks
gsub('\"', ' ', HTMLBooks)
class(HTMLBooks)
HTMLBooks = htmlParse(CesarBooks.html, asText = TRUE)
HTMLBooks = htmlParse('CesarBooks.html', asText = TRUE)
xpathApply(HTMLBooks, "//table//tbody//tr")
xpathApply(HTMLBooks, "//table//th//tr")
HTMLBooks = htmlTreeParse('CesarBooks.html',
useInternal = TRUE)
HTMLBooks = unlist(xpathApply(HTMLBooks, '//tr', xmlValue))
HTMLBooks
kable(head(JSONBooks), caption = "Table 1. JSON Table")
kable(head(JSONBooks), caption = "Table 1. JSON Table")
library(knitr)
kable(head(JSONBooks), caption = "Table 1. JSON Table")
library(knitr)
kable(head(JSONBooks), caption = "Table 1. JSON Table")
kable(head(XMLBooks), caption = "Table 2. XML Table")
kable(head(HTMLBooks), caption = "Table 3. HTML Table")
HTMLBooks
HTMLBooks <- htmlTreeParse('CesarBooks.html',
useInternal = TRUE)
HTMLBooks <- unlist(xpathApply(HTMLBooks, '//tr', xmlValue))
HTMLBooks <- gsub('\\n', ' ', HTMLBooks)
HTMLBooks <- gsub('\\r', ' ', HTMLBooks)
HTMLBooks <- gsub('\\t', ' ', HTMLBooks)
HTMLBooks
kable(head(HTMLBooks), caption = "Table 3. HTML Table")
colnames(HTMLBooks[1])
class(HTMLBooks)
HTMLBooks[1]
HTML<-readHTMLTable('CesarBooks.html', header = TRUE)
HTML
class(JSONBooks)
class(XMLBooks)
class(HTMLBooks)
kable(head(JSONBooks), caption = "Table 1. JSON Table")
kable(head(XMLBooks), caption = "Table 2. XML Table")
kable(head(HTMLBooks), caption = "Table 3. HTML Table")
kable(head(JSONBooks), caption = "Table 1. JSON Table")
kable(head(XMLBooks), caption = "Table 2. XML Table")
JSONBooks <- fromJSON("CesarBooks.json", flatten=TRUE)
class(JSONBooks)
colnames(JSONBooks)
#Import XML
XMLBooks=xmlParse("CesarBooks.xml")
class(XMLBooks)
#Import HTML
HTMLBooks<-readHTMLTable('CesarBooks.html', header = TRUE)
# Replace all \n by spaces
class(HTMLBooks)
```
JSONBooks <- fromJSON("CesarBooks.json", flatten=TRUE)
class(JSONBooks)
colnames(JSONBooks)
#Import XML
XMLBooks <- xmlParse("CesarBooks.xml")
class(XMLBooks)
#Import HTML
HTMLBooks <- readHTMLTable('CesarBooks.html', header = TRUE)
# Replace all \n by spaces
class(HTMLBooks)
kable(head(JSONBooks), caption = "Table 1. JSON Table")
kable(head(XMLBooks), caption = "Table 2. XML Table")
kable(head(HTMLBooks), caption = "Table 3. HTML Table")
kable(head(JSONBooks), caption = "Table 1. JSON Table")
kable(head(XMLBooks), caption = "Table 2. XML Table")
XMLBooks <- xmlParse("CesarBooks.xml")
XMLBooks
xmltolist(XMLBooks)
xmlToList(XMLBooks)
XMLBooks <- xmlTreeParse("CesarBooks.xml")
XMLBooks <- xmlRoot(XMLBooks)
XMLBooks <- xmlSApply(XMLBooks, function(x) xmlSApply(x, xmlValue))
XMLBooks <- data.frame(t(XMLBooks),row.names=NULL)
XMLBooks
library(knitr)
kable(head(JSONBooks), caption = "Table 1. JSON Table")
kable(head(XMLBooks), caption = "Table 2. XML Table")
kable(head(HTMLBooks), caption = "Table 3. HTML Table")
all.equal(JSONBooks, XMLBooks)
identical(JSONBooks, XMLBooks)
identical(JSONBooks, HTMLBooks)
identical(XMLBooks, HTMLBooks)
