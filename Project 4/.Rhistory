apply(estimates, 2, mean)
apply(estimates, 2, var)
M <- 10000 #number of replicates
k <- 10 #number of strata
r <- M / k #replicates per stratum
N <- 50 #number of times to repeat the estimation T2 <- numeric(k)
estimates <- matrix(0, N, 2)
g <- function(x) {
x^3/3*x^3/3
}
for (i in 1:N) {
estimates[i, 1] <- mean(g(runif(M)))
for (j in 1:k){
T2[j] <- mean(g(runif(M/k, (j-1)/k, j/k)))
}
estimates[i, 2] <- mean(T2)
}
apply(estimates, 2, mean)
apply(estimates, 2, var)
M <- 10000 #number of replicates
k <- 10 #number of strata
r <- M / k #replicates per stratum
N <- 50 #number of times to repeat the estimation T2 <- numeric(k)
estimates <- matrix(0, N, 2)
g <- function(x) {
x^3/3+0.5
}
for (i in 1:N) {
estimates[i, 1] <- mean(g(runif(M)))
for (j in 1:k){
T2[j] <- mean(g(runif(M/k, (j-1)/k, j/k)))
}
estimates[i, 2] <- mean(T2)
}
apply(estimates, 2, mean)
apply(estimates, 2, var)
m = 10000
a = - 12 + 6 * (exp(1) - 1)
U = runif(m)
X = (U)^3/3
Y = U
muY = 0.5
Xb = mean(X)
Yb = mean(Y)
cs = -sum((X-Xb)*(Y-Yb))/sum((Y-Yb)^2)
Z = X + cs*(Y-muY)
print(Xb)
print(Yb)
print(Z)
print(Z)
M <- 10000 #number of replicates
k <- 10 #number of strata
r <- M / k #replicates per stratum
N <- 50 #number of times to repeat the estimation T2 <- numeric(k)
estimates <- matrix(0, N, 2)
g <- function(x) {
x^3/3+0.5
}
for (i in 1:N) {
estimates[i, 1] <- mean(g(runif(M)))
for (j in 1:k){
T2[j] <- mean(g(runif(M/k, (j-1)/k, j/k)))
estimates[i, 2] <- mean(T2)
}
}
apply(estimates, 2, mean)
apply(estimates, 2, var)
M <- 10000 #number of replicates
k <- 10 #number of strata
r <- M / k #replicates per stratum
N <- 50 #number of times to repeat the estimation T2 <- numeric(k)
estimates <- matrix(0, N, 2)
g <- function(x) {
x^3/3
}
for (i in 1:N) {
estimates[i, 1] <- mean(g(runif(M)))
for (j in 1:k){
T2[j] <- mean(g(runif(M/k, (j-1)/k, j/k)))
estimates[i, 2] <- mean(T2)
}
}
apply(estimates, 2, mean)
apply(estimates, 2, var)
killDbConnections <- function () {
all_cons <- dbListConnections(MySQL())
print(all_cons)
for(con in all_cons)
+  dbDisconnect(con)
print(paste(length(all_cons), " connections killed."))
}
#MonteCarlo
M1<-10000
x1<-runif(M1)
theta.hat <- mean(x1^2)
print(theta.hat)
print(1^3/3)
#strata
M <- 10000 #number of replicates
k <- 10 #number of strata
r <- M / k #replicates per stratum
N <- 50 #number of times to repeat the estimation T2 <- numeric(k)
estimates <- matrix(0, N, 2)
g <- function(x) {
x^3/3
}
for (i in 1:N) {
estimates[i, 1] <- mean(g(runif(M)))
for (j in 1:k){
T2[j] <- mean(g(runif(M/k, (j-1)/k, j/k)))
estimates[i, 2] <- mean(T2)
}
}
apply(estimates, 2, mean)
apply(estimates, 2, var)
install.packages(c("httr", "jsonlite", "lubridate"))
library(jsonlite)
library(XML)
library(knitr)
library(httr)
library(lubridate)
moviesreviews<-fromJSON("https://api.nytimes.com/svc/movies/v2/reviews/search.json?api-key=9f2d716acf3141258fe2426cf7079747")
head(moviesreviews)
asFrame <- do.call("rbind.fill", lapply(moviesreviews, as.data.frame))
head(asFrame)
moviesreviews<-fromJSON("https://api.nytimes.com/svc/movies/v2/reviews/search.json?api-key=9f2d716acf3141258fe2426cf7079747", nullValue = NA)
asFrame <- do.call("rbind.fill", lapply(moviesreviews, as.data.frame))
head(asFrame)
library(tidyr)
asFrame <- do.call("rbind.fill", lapply(moviesreviews, as.data.frame))
head(asFrame)
asFrame <- sapply(moviesreviews,rbind)
head(asFrame)
class(asFrame)
do.call("rbind", lapply(moviesreviews, data.frame))
library(tidry)
head(moviesreviews)
moviesreviews[[1]]
moviesreviews[1,
]
dim(moviesreviews)
typeof(moviesreviews)
moviesreviews$mpaa_rating
moviesreviews$mpaa_rating
fromJSON(moviesreviews) %>% as.data.frame
fromJSON("https://api.nytimes.com/svc/movies/v2/reviews/search.json?api-key=9f2d716acf3141258fe2426cf7079747", nullValue = NA) %>% as.data.frame()
test <- fromJSON("https://api.nytimes.com/svc/movies/v2/reviews/search.json?api-key=9f2d716acf3141258fe2426cf7079747", nullValue = NA) %>% as.data.frame()
test <- fromJSON("https://api.nytimes.com/svc/movies/v2/reviews/search.json?api-key=9f2d716acf3141258fe2426cf7079747") %>% as.data.frame()
View(test)
View(test)
moviesreviews <- fromJSON("https://api.nytimes.com/svc/movies/v2/reviews/search.json?api-key=9f2d716acf3141258fe2426cf7079747") %>% as.data.frame()
head(asFrame)
View(moviesreviews)
View(moviesreviews)
kable(head(moviesreviews), caption = "Table 1. NY Times Movie Reviews")
library(tidyr)
kable(head(moviesreviews), caption = "Table 1. NY Times Movie Reviews")
library(tidyr)
library(stringr)
kable(head(moviesreviews), caption = "Table 1. NY Times Movie Reviews")
kable(head(moviesreviews), caption = "Table 1. NY Times Movie Reviews")
library(jsonlite)
library(XML)
library(knitr)
library(httr)
library(lubridate)
library(tidyr)
library(stringr)
kable(head(moviesreviews), caption = "Table 1. NY Times Movie Reviews")
head(moviesreviews)
moviesreviews <- fromJSON("https://api.nytimes.com/svc/movies/v2/reviews/search.json?api-key=9f2d716acf3141258fe2426cf7079747") %>% as.data.frame()
head(moviesreviews)
kable(head(moviesreviews), caption = "Table 1. NY Times Movie Reviews")
head(moviesreviews)
moviesreviews[is.na(moviesreviews)]<-""
kable(head(moviesreviews), caption = "Table 1. NY Times Movie Reviews")
head(moviesreviews)
moviesreviews[(moviesreviews)="<NA>"]<-""
moviesreviews[(moviesreviews)=="<NA>"]<-""
moviesreviews[sapply(moviesreviews)=="<NA>"]<-""
moviesreviews[moviesreviews$results.opening_date=="<NA>"]<-""
moviesreviews[moviesreviews$results.opening_date="<NA>"]<-""
moviesreviews$results.opening_date[moviesreviews$results.opening_date="<NA>"]<-""
moviesreviews$results.opening_date
is.na(moviesreviews)
moviesreviews$results.opening_date[is.na(moviesreviews$results.opening_date)]<-""
kable(head(moviesreviews), caption = "Table 1. NY Times Movie Reviews")
moviesreviews$results.opening_date[is.na(moviesreviews$results.opening_date)]<-""
kable(head(moviesreviews), caption = "Table 1. NY Times Movie Reviews")
head(moviesreviews)
typeof(moviesreviews)
mMC.Phi <- function(x, R = 10000, antithetic = TRUE) { u <- runif(R/2)
if (!antithetic) v <- runif(R/2) else v <- 1 - u
u <- c(u, v)
cdf <- numeric(length(x)) for (i in 1:length(x)) {
g <- x[i] * exp(-(u * x[i])^2 / 2)
cdf[i] <- mean(g) / sqrt(2 * pi) + 0.5 }
cdf }
library(stringr)
library(dplyr)
library(tm)
library(RTextTools)
library(wordcloud)
library(DT)
library(ROCR)
library(ggplot2)
setwd("~/Documents/CUNYMSDA/Data 607/CUNYDATA607/Project 4")
projectjunk <- VCorpus(DirSource("spam_2"))
projectgood <- VCorpus(DirSource("easy_ham"))
## update headers into 1 and 0 to differentiate for processing
meta(projectjunk, "spam") <- 1
meta(projectgood, "spam") <- 0
projectall <- c(projectjunk, projectgood)
projectall
projectjunk
projectgood
projectall <- tm_map(projectall, content_transformer(tolower))
projectall <- tm_map(projectall, removeNumbers)
projectall <- tm_map(projectall, removeWords, words = stopwords("en"))
projectall <- tm_map(projectall, content_transformer(function(x) str_replace_all(x, "[[:punct:]]|<|>", " ")))
projectall <- tm_map(projectall, stripWhitespace)
projectjunk <- VCorpus(DirSource("spam_2", encoding="UTF-8"))
projectgood <- VCorpus(DirSource("easy_ham", encoding="UTF-8"))
## update headers into 1 and 0 to differentiate for processing
meta(projectjunk, "spam") <- 1
meta(projectgood, "spam") <- 0
projectall <- c(projectjunk, projectgood)
projectall <- tm_map(projectall, content_transformer(tolower))
projectall <- tm_map(projectall, removeNumbers)
projectall <- tm_map(projectall, removeWords, words = stopwords("en"))
projectall <- tm_map(projectall, content_transformer(function(x) str_replace_all(x, "[[:punct:]]|<|>", " ")))
projectall <- tm_map(projectall, stripWhitespace)
termdocumentmatrix(projectall)
TermDocumentMatrix(projectall)
removeSparseTerms(TermDocumentMatrix(projectall), 0.95)
projectall <- removeSparseTerms(TermDocumentMatrix(projectall), 0.95)
sample(projectall)
projectall <- tm_map(projectall, content_transformer(tolower))
projectall <- tm_map(projectall, removeNumbers)
projectall <- tm_map(projectall, removeWords, words = stopwords("en"))
projectall <- tm_map(projectall, content_transformer(function(x) str_replace_all(x, "[[:punct:]]|<|>", " ")))
projectall <- tm_map(projectall, stripWhitespace)
projectjunk <- VCorpus(DirSource("spam_2"))
projectgood <- VCorpus(DirSource("easy_ham"))
## update headers into 1 and 0 to differentiate for processing
meta(projectjunk, "spam") <- 1
meta(projectgood, "spam") <- 0
projectall <- c(projectjunk, projectgood)
projectall <- tm_map(projectall, content_transformer(tolower))
projectall <- tm_map(projectall, removeNumbers)
projectall <- tm_map(projectall, removeWords, words = stopwords("en"))
projectall <- tm_map(projectall, content_transformer(function(x) str_replace_all(x, "[[:punct:]]|<|>", " ")))
projectall <- tm_map(projectall, stripWhitespace)
projectall <- removeSparseTerms(TermDocumentMatrix(projectall), 0.95)
sample(projectall)
projectjunk <- VCorpus(DirSource("spam_2"))
projectgood <- VCorpus(DirSource("easy_ham"))
## update headers into 1 and 0 to differentiate for processing
meta(projectjunk, "spam") <- 1
meta(projectgood, "spam") <- 0
projectall <- c(projectjunk, projectgood)
projectalldtm <- removeSparseTerms(TermDocumentMatrix(projectall), 0.95)
projectall <- tm_map(projectall, content_transformer(tolower))
projectall <- tm_map(projectall, removeNumbers)
projectall <- tm_map(projectall, removeWords, words = stopwords("en"))
projectall <- tm_map(projectall, content_transformer(function(x) str_replace_all(x, "[[:punct:]]|<|>", " ")))
projectall <- tm_map(projectall, stripWhitespace)
projectalldtm <- removeSparseTerms(TermDocumentMatrix(projectall), 0.95)
sample(projectall)
data.frame(dataset = "training", prop.table(table(spam = meta(projectall[1:1500]))),
stringsAsFactors = FALSE)
#generate training data
train <- data.frame(dataset = "training", prop.table(table(spam = meta(projectall[1:1500]))),
stringsAsFactors = FALSE)
#generate test data
test <- data.frame(dataset = "test", prop.table(table(spam = meta(projectall[1501:length(projectall)]))),
stringsAsFactors = FALSE)
splits <- bind_rows(first,second)
colnames(splits)[3] <- "prop"
splits
splits <- bind_rows(first,second)
splits <- bind_rows(train,test)
train
test
data.frame(dataset = "test", prop.table(table(spam = meta(projectall[1501:length(projectall)]))),
stringsAsFactors = FALSE)
data.frame(dataset = "training", prop.table(table(spam = meta(projectall[1:1500]))),
stringsAsFactors = FALSE)
length(projectall)
prop.table(table(spam = meta(projectall[1501:length(projectall)])))
prop.table(table(spam = meta(projectall[1:1500])))
bind_rows(data.frame(dataset = "training", prop.table(table(spam = meta(projectall[1:1500]))),
stringsAsFactors = FALSE),
data.frame(dataset = "test", prop.table(table(spam = meta(emails[1501:length(projectall)]))),
stringsAsFactors = FALSE))
bind_rows(data.frame(dataset = "training", prop.table(table(spam = meta(projectall[1:1500]))),
stringsAsFactors = FALSE),
data.frame(dataset = "test", prop.table(table(spam = meta(projectall[1501:length(projectall)]))),
stringsAsFactors = FALSE))
projectall <- c(projectjunk, projectgood)
projectall <- tm_map(projectall, content_transformer(tolower))
projectall <- tm_map(projectall, removeNumbers)
projectall <- tm_map(projectall, removeWords, words = stopwords("en"))
projectall <- tm_map(projectall, content_transformer(function(x) str_replace_all(x, "[[:punct:]]|<|>", " ")))
projectall <- tm_map(projectall, stripWhitespace)
bind_rows(data.frame(dataset = "training", prop.table(table(spam = meta(projectall[1:1500]))),
stringsAsFactors = FALSE),
data.frame(dataset = "test", prop.table(table(spam = meta(projectall[1501:length(projectall)]))),
stringsAsFactors = FALSE))
projectall <- sample(projectall)
bind_rows(data.frame(dataset = "training", prop.table(table(spam = meta(projectall[1:1500]))),
stringsAsFactors = FALSE),
data.frame(dataset = "test", prop.table(table(spam = meta(projectall[1501:length(projectall)]))),
stringsAsFactors = FALSE))
train <- data.frame(dataset = "training", prop.table(table(spam = meta(projectall[1:1500]))),
stringsAsFactors = FALSE)
#generate test data
test <- data.frame(dataset = "test", prop.table(table(spam = meta(projectall[1501:length(projectall)]))),
stringsAsFactors = FALSE)
bind_rows(train,test)
splits <- bind_rows(train,test)
knitr::kable(props_classes)
knitr::kable(bind_rows(train,test))
findFreqTerms(projectalldtm, 1000)
findFreqTerms(projectalldtm, 50)
findFreqTerms(projectalldtm, 10000)
findFreqTerms(projectalldtm, 9000)
findFreqTerms(projectalldtm, 8000)
projectall <- sample(projectall)
n <- length(projectall)
label <- unlist(meta(projectall))
train <- data.frame(dataset = "training", prop.table(table(spam = meta(projectall[1:1500]))),
stringsAsFactors = FALSE)
#generate test data
test <- data.frame(dataset = "test", prop.table(table(spam = meta(projectall[1501:n]))),
stringsAsFactors = FALSE)
knitr::kable(bind_rows(train,test))
create_container(dtm,
labels = label,
trainSize = 1:1500,
testSize = 1501:n,
virgin = FALSE)
create_container(projectalldtm,
labels = label,
trainSize = 1:1500,
testSize = 1501:n,
virgin = FALSE)
projectall <- c(projectjunk, projectgood)
projectall <- tm_map(projectall, content_transformer(tolower))
projectall <- tm_map(projectall, removeNumbers)
projectall <- tm_map(projectall, removeWords, words = stopwords("en"))
projectall <- tm_map(projectall, content_transformer(function(x) str_replace_all(x, "[[:punct:]]|<|>", " ")))
projectall <- tm_map(projectall, stripWhitespace)
projectall <- sample(projectall)
n <- length(projectall)
label <- unlist(meta(projectall))
train <- data.frame(dataset = "training", prop.table(table(spam = meta(projectall[1:1500]))),
stringsAsFactors = FALSE)
#generate test data
test <- data.frame(dataset = "test", prop.table(table(spam = meta(projectall[1501:n]))),
stringsAsFactors = FALSE)
#Table
knitr::kable(bind_rows(train,test))
projectalldtm <- removeSparseTerms(TermDocumentMatrix(projectall), 0.95)
findFreqTerms(projectalldtm, 8000)
create_container(projectalldtm,
labels = label,
trainSize = 1:1500,
testSize = 1501:n,
virgin = FALSE)
projectalldtm <- removeSparseTerms(TermDocumentMatrix(projectall, control = list(minWordLength = 2, minDocFreq = 5)), 0.95)
findFreqTerms(projectalldtm, 8000)
create_container(projectalldtm,
labels = label,
trainSize = 1:1500,
testSize = 1501:n,
virgin = FALSE)
n
projectalldtm
create_container(projectalldtm,
labels = label,
trainSize = 1:1500,
testSize = 1501:2898,
virgin = FALSE)
projectalldtm <- DocumentTermMatrix(projectall)
projectalldtm <- removeSparseTerms(projectalldtm, 0.95)
findFreqTerms(projectalldtm, 8000)
create_container(projectalldtm,
labels = label,
trainSize = 1:1500,
testSize = 1501:3898,
virgin = FALSE)
projectalldtm <- removeSparseTerms(TermDocumentMatrix(projectall, control = list(minWordLength = 2, minDocFreq = 5)), 0.95)
findFreqTerms(projectalldtm, 8000)
create_container(projectalldtm,
labels = label,
trainSize = 1:1500,
testSize = 1501:3898,
virgin = FALSE)
projectalldtm <- removeSparseTerms(DocumentTermMatrix(projectall, control = list(minWordLength = 2, minDocFreq = 5)), 0.95)
findFreqTerms(projectalldtm, 8000)
create_container(projectalldtm,
labels = label,
trainSize = 1:1500,
testSize = 1501:3898,
virgin = FALSE)
create_container(projectalldtm,
labels = label,
trainSize = 1:1500,
testSize = 1501:n,
virgin = FALSE)
container <- create_container(projectalldtm,
labels = label,
trainSize = 1:1500,
testSize = 1501:n,
virgin = FALSE)
svm_model <- train_model(container, "SVM")
tree_model <- train_model(container, "TREE")
maxent_model <- train_model(container, "MAXENT")
svm_out <- classify_model(container, svm_model)
tree_out <- classify_model(container, tree_model)
maxent_out <- classify_model(container, maxent_model)
library(SDMTools)
library(pROC)
install.packages(pROC)
install.packages("pROC")
install.packages("SDMTools")
library(SDMTools)
library(pROC)
cbind(meta(emails[1501:length(emails)]), svm_out, tree_out, maxent_out)
cbind(meta(projectall[1501:length(projectall)]), svm_out, tree_out, maxent_out)
data.frame(correct_label = label[test],maxent = maxent_out[,1])
data.frame(maxent = maxent_out[,1])
labels_out<-data.frame(maxent = maxent_out[,1])
labels_out<-data.frame(maxent = maxent_out[,1])
#output confusion matrix
confusion.matrix(labels_out$correct_label, labels_out$maxent)
confusion.matrix(labels_out$maxent)
label
maxent = maxent_out[,1]
maxent
head(label)
head(label[1])
head(label[,1])
head(label[1,])
head(label[1])
maxent_out(1,1)
maxent_out[1,1]
results <- cbind(meta(projectall[1501:length(projectall)]), svm_out, tree_out, maxent_out)
head(results)
confusion.matrix(results$spam, maxent_out[,1])
results <- cbind(meta(projectall[1501:n]), svm_out, tree_out, maxent_out)
confusion.matrix(results$spam, maxent_out[,1])
confusion.matrix(results$spam, svm_out[,1])
confusion.matrix(results$spam, maxent_out[,1])
confusion.matrix(results$spam, svm_out[,1])
confusion.matrix(results$spam, tree_out[,1])
2398
= 15/2398
15%2398
15/2398
45/2398
58/2398
roc(results$spam, as.numeric(as.character(maxent_out[,1])))
plot(roc(results$spam, as.numeric(as.character(maxent_out[,1]))))
plot(roc(results$spam, as.numeric(as.character(svm_out[,1]))))
plot(roc(results$spam, as.numeric(as.character(maxent_out[,1]))))+plot(roc(results$spam, as.numeric(as.character(svm_out[,1]))))
plot(roc(results$spam, as.numeric(as.character(maxent_out[,1]))))
plot(roc(results$spam, as.numeric(as.character(svm_out[,1]))))
mfrow(c(1,3))
plot(roc(results$spam, as.numeric(as.character(maxent_out[,1]))))
plot(roc(results$spam, as.numeric(as.character(svm_out[,1]))))
plot(roc(results$spam, as.numeric(as.character(tree_out[,1]))))
par(mfrow(c(1,3)))
plot(roc(results$spam, as.numeric(as.character(maxent_out[,1])))
plot(roc(results$spam, as.numeric(as.character(svm_out[,1])))
plot(roc(results$spam, as.numeric(as.character(tree_out[,1])))
par(mfrow(c(1,3)))
plot(roc(results$spam, as.numeric(as.character(maxent_out[,1]))))
plot(roc(results$spam, as.numeric(as.character(svm_out[,1]))))
plot(roc(results$spam, as.numeric(as.character(tree_out[,1]))))
par(mfrow=c(1,3))
plot(roc(results$spam, as.numeric(as.character(maxent_out[,1]))))
plot(roc(results$spam, as.numeric(as.character(svm_out[,1]))))
plot(roc(results$spam, as.numeric(as.character(tree_out[,1]))))
par(mfrow=c(1,3))
plot(roc(results$spam, as.numeric(as.character(maxent_out[,1]))), main="Maxent")
plot(roc(results$spam, as.numeric(as.character(svm_out[,1]))), main="SVM")
plot(roc(results$spam, as.numeric(as.character(tree_out[,1]))), main="Tree")
par(mfrow=c(1,3))
plot(roc(results$spam, as.numeric(as.character(maxent_out[,1]))), main="Maxent", color="red")
plot(roc(results$spam, as.numeric(as.character(svm_out[,1]))), main="SVM")
plot(roc(results$spam, as.numeric(as.character(tree_out[,1]))), main="Tree")
plot(roc(results$spam, as.numeric(as.character(maxent_out[,1]))), main="Maxent", line="red")
svm_model$weight
svm_model@weight
maxent_df<-maxent_model@weights
maxent_df$Weight_Adj<-as.numeric(as.character(maxent_df$Weight))
maxent_df$Feature_Adj<-as.numeric(as.character(maxent_df$Feature))
head(maxent_df)
maxent_df$Terms<-dtm$dimnames$Terms[maxent_df$Feature_Adj]
maxent_df$Terms<-projectalldtm$dimnames$Terms[maxent_df$Feature_Adj]
head(maxent_df)
head(arrange(maxent_df, desc(Weight_Adj)), n =15)
head(arrange(maxent_df, desc(Weight_Adj)), n =30)
projectjunk <- VCorpus(DirSource("spam_2"))
projectgood <- VCorpus(DirSource("easy_ham"))
meta(projectjunk, "spam") <- 1
meta(projectgood, "spam") <- 0
projectall <- c(projectjunk, projectgood)
print("List of Common Terms")
results
