lapply(destinationed_users, function(u) createRel(plane, "destinationed", u))
}
}
lapply(flights, create_db)
plane = getOrCreateNode(graph, "Plane", id = flights$id, airtime = flights$air_time)
plane = getOrCreateNode(graph, "Plane", id = flights$tailnum, airtime = flights$air_time)
clear(graph)
addConstraint(graph, "PlaneID", "tailnum")
addConstraint(graph, "Origin","origin")
addConstraint(graph, "Destination", "dest")
plane = getOrCreateNode(graph, "PlaneID", tailnum = flights$tailnum, airtime = flights$air_time)
clear(graph)
addConstraint(graph, "PlaneID", "id")
addConstraint(graph, "Origin","origin")
addConstraint(graph, "Destination", "dest")
create_db = function(x) {
plane = getOrCreateNode(graph, "PlaneID", id = x$id, airtime = x$air_time)
origin = getOrCreateNode(graph, "Origin", originname = x$origin)
createRel(origin, "PlaneFlew", plane)
flying_to_dest = x$flyingto
if(length(flying_to) > 0 ) {
flying_origin = getOrCreateNode(graph, "Origin", tailnum = flying_to_dest)
createRel(plane, "In_Flight_To", flying_origin)
}
flying_dest = getOrigin(x$air_time)
if(!is.null(flying_dest)) {
flying_dest_user = getOrCreateNode(graph, "Origin", origin = flying_dest)
createRel(plane, "Plane_From", flying_dest_user)
}
flights = getFlightNo(x$air_time)
if(!is.null(plane)) {
flight_nodes = lapply(flights, function(f) getOrCreateNode(graph, "Flight", flight=f))
lapply(flight_nodes, function(f) createRel(plane, "FLIGHT", f))
}
destinations = getDest(x$air_time)
if(!is.null(destinations)) {
destinationed_users = lapply(destinations, function(d) getOrCreateNode(graph, "origin", originname = d))
lapply(destinationed_users, function(u) createRel(plane, "destinationed", u))
}
}
lapply(flights, create_db)
setwd("~/Documents/CUNYMSDA/Data 607/CUNYDATA607/Week 13")
flights <- dbReadTable(con, "flights")
flights <- mutate(flights, id = as.numeric(rownames(flights)))
write.csv(flights, file='flights.csv', row.names=FALSE)
graph = startGraph("http://localhost:7474/db/data/", username="neo4j", password="Espiti@1")
clear(graph)
LOAD CSV WITH HEADERS FROM "file:///flights.csv" AS flights
CREATE(f: Flight {year: flights.year, month: flights.month, day: flights.day, dep_time: flights.dep_time, dep_delay: flights.dep_delay, arr_time: flights.arr_time, arr_delay: flights.arr_delay, carrier: flights.carrier, tailnum: flights.tailnum, flight_num: flights.flight, origin: flights.origin, dest: flights.dest, air_time: flights.air_time, distance: flights.distance, hour: flights.hour, minute: flights.minute, id: flights.id});
getwd
getwed()
getwd()
dbDisconnect(con)
dbUnloadDriver(drv)
path <- ("/Users/cesarespitia/Documents/CUNYMSDA/Data 607/CUNYDATA607/Week 13/flights.csv")
con<- file(path, open="r")
tb<- read.csv(con, header=TRUE, stringsAsFactors = FALSE)
close(con)
head(tb)
path <- ("/Users/cesarespitia/Documents/CUNYMSDA/Data 607/CUNYDATA607/Week 13/flights.csv")
con<- file(path, open="r")
flightneo<- read.csv(con, header=TRUE, stringsAsFactors = FALSE)
close(con)
head(flightneo)
graph = startGraph("http://localhost:7474/db/data/", username="neo4j", password="Espiti@1")
clear(graph)
addConstraint(graph, "PlaneID", "tailnum")
addConstraint(graph, "flightno","flights")
query = "
MERGE (:origin {name:{origin}})
MERGE (:dest {year:{dest}})
MERGE (:counts {year:{year},month:{month},day:{day},dep_time:{dep_time}, dep_delay:{dep_delay},
arr_time:{arr_time},arr_delay:{arr_delay},carrier:{carrier},tailnum:{tailnum},
flight:{flight},origin:{origin},dest:{dest},air_time:{air_time},distance:{distance},
hour:{hour},minute:{minute},id:{id}})
"
fn = newTransaction(graph)
for (i in 1:nrow(flightneo)) {
# Upload in blocks of 1000.
if(i %% 1000 == 0) {
# Commit current transaction.
commit(fn)
# Open new transaction.
fn = newTransaction(graph)
}
# Append paramaterized Cypher query to transaction.
appendCypher(fn,
query,
origin = flightneo$origin[i],
dest = flightneo$dest[i],
year = flightneo$year[i],
month = flightneo$month[i]
day = flightneo$day[i]
dep_time = flightneo$dep_time[i]
dep_delay = flightneo$dep_delay[i]
arr_time = flightneo$arr_time[i]
arr_delay = flightneo$arr_delay[i]
carrier = flightneo$carrier[i]
tailnum = flightneo$tailnum[i]
flight = flightneo$flight[i]
air_time = flightneo$air_time[i]
distance = flightneo$distance[i]
hour = flightneo$hour[i]
minute = flightneo$minute[i]
id = flightneo$id[i]
)
}
commit(tx)
print("All done!")
fn = newTransaction(graph)
for (i in 1:nrow(flightneo)) {
# Upload in blocks of 1000.
if(i %% 1000 == 0) {
# Commit current transaction.
commit(fn)
# Open new transaction.
fn = newTransaction(graph)
}
# Append paramaterized Cypher query to transaction.
appendCypher(fn,
query,
origin = flightneo$origin[i],
dest = flightneo$dest[i],
year = flightneo$year[i],
month = flightneo$month[i]
day = flightneo$day[i]
dep_time = flightneo$dep_time[i]
dep_delay = flightneo$dep_delay[i]
arr_time = flightneo$arr_time[i]
arr_delay = flightneo$arr_delay[i]
carrier = flightneo$carrier[i]
tailnum = flightneo$tailnum[i]
flight = flightneo$flight[i]
air_time = flightneo$air_time[i]
distance = flightneo$distance[i]
hour = flightneo$hour[i]
minute = flightneo$minute[i]
id = flightneo$id[i]
)
}
commit(fn)
print("All done!")
nrow(fligthneo)
nrow(flightneo)
fn = newTransaction(graph)
fn = newTransaction(graph)
for (i in 1:nrow(flightneo)) {
# Upload in blocks of 1000.
if(i %% 1000 == 0) {
# Commit current transaction.
commit(fn)
# Open new transaction.
fn = newTransaction(graph)
}
# Append paramaterized Cypher query to transaction.
appendCypher(fn,
query,
origin = flightneo$origin[i],
dest = flightneo$dest[i],
year = flightneo$year[i],
month = flightneo$month[i],
day = flightneo$day[i],
dep_time = flightneo$dep_time[i],
dep_delay = flightneo$dep_delay[i],
arr_time = flightneo$arr_time[i],
arr_delay = flightneo$arr_delay[i],
carrier = flightneo$carrier[i],
tailnum = flightneo$tailnum[i],
flight = flightneo$flight[i],
air_time = flightneo$air_time[i],
distance = flightneo$distance[i],
hour = flightneo$hour[i],
minute = flightneo$minute[i],
id = flightneo$id[i]
)
}
commit(fn)
print("All done!")
query = "MATCH (a:origin), (b:counts) where (a.name) = (b.origin) CREATE (a)-[:count_of]->b"
fn = newTransaction(graph)
appendCypher(fn, query)
commit(fn)
query = "MATCH (a:origin), (b:counts) where (a.name) = (b.origin) CREATE (a)-[:count_of]->(b)"
fn = newTransaction(graph)
appendCypher(fn, query)
commit(fn)
query = "MATCH (a:counts), (b:dest) where (a.dest) = (b.dest) CREATE (a)-[:destcount]->(b)"
fn = newTransaction(graph)
appendCypher(fn, query)
commit(fn)
graph = startGraph("http://localhost:7474/db/data/", username="neo4j", password="Espiti@1")
browse(graph)
View(flights)
View(flights)
MATCH (c:origin) -[x:count_of]-(c1:counts)-[:destcount]-(d:dest) WHERE toInt(c1.flightno) = 1141 AND toString(d:dest) = "JFK" return c,x,c1,d
MATCH (c:origin) -[x:count_of]-(c1:counts)-[:destcount]-(d:dest) WHERE toInt(c1.flightno) = 1141 AND toString(d:dest) = "JFK" return c,x,c1,d
MATCH (c:origin) -[x:count_of]-(c1:counts)-[:in_year]-(y:year) WHERE toInt(c1.cases) > 100000 AND toInt(y.year) > 2010 return c,x,c1,y
MATCH (c:origin) -[x:count_of]-(c1:counts)-[:destcount]-(d:dest) WHERE toInt(c1.flightno) = 1141 AND toString(d.dest) = "JFK" return c,x,c1,d
query = "MATCH (a:counts), (b:dest) where (a.dest) = (b.dest) CREATE (a)-[:destcount]->(b)"
fn = newTransaction(graph)
appendCypher(fn, query)
commit(fn)
query = "MATCH (a:counts), (b:dest) where (a.year) = (b.dest) CREATE (a)-[:destcount]->(b)"
fn = newTransaction(graph)
appendCypher(fn, query)
commit(fn)
MATCH (c:origin) -[x:count_of]-(c1:counts)-[:destcount]-(d:dest) WHERE toInt(c1.flightno) = 1141 AND toString(d.dest) = "JFK" return c,x,c1,d
clear(graph)
clear(graph )
clear(graph, input = FALSE)
library(RMySQL)
library(RNeo4j)
library(dplyr)
con <- dbConnect(RMySQL::MySQL(),
dbname = "flights",
host = "localhost",
port = 3306,
user = "root",
password = "Espiti@1")
table_names <- dbListTables(con)
flights <- dbReadTable(con, "flights")
flights <- mutate(flights, id = as.numeric(rownames(flights)))
##flights <- subset(flights, select = c(flights$id,flights$tailnum, flights$flight, flights$tailnum, flights$dest, flights$origin))
write.csv(flights, file='flights.csv', row.names=FALSE)
dbDisconnect(con)
path <- ("/Users/cesarespitia/Documents/CUNYMSDA/Data 607/CUNYDATA607/Week 13/flights.csv")
con<- file(path, open="r")
flightneo<- read.csv(con, header=TRUE, stringsAsFactors = FALSE)
close(con)
head(flightneo)
graph = startGraph("http://localhost:7474/db/data/", username="neo4j", password="Espiti@1")
clear(graph, input = FALSE)
addConstraint(graph, "PlaneID", "tailnum")
addConstraint(graph, "flightno","flights")
#using import guide from neo4j
query = "
MERGE (:origin {name:{origin}})
MERGE (:dest {year:{dest}})
MERGE (:counts {year:{year},month:{month},day:{day},dep_time:{dep_time},dep_delay:{dep_delay},
arr_time:{arr_time},arr_delay:{arr_delay},carrier:{carrier},tailnum:{tailnum},
flight:{flight},origin:{origin},dest:{dest},air_time:{air_time},distance:{distance},
hour:{hour},minute:{minute},id:{id}})
"
fn = newTransaction(graph)
for (i in 1:nrow(flightneo)) {
# Upload in blocks of 1000.
if(i %% 1000 == 0) {
# Commit current transaction.
commit(fn)
# Open new transaction.
fn = newTransaction(graph)
}
# Append paramaterized Cypher query to transaction.
appendCypher(fn,
query,
origin = flightneo$origin[i],
dest = flightneo$dest[i],
year = flightneo$year[i],
month = flightneo$month[i],
day = flightneo$day[i],
dep_time = flightneo$dep_time[i],
dep_delay = flightneo$dep_delay[i],
arr_time = flightneo$arr_time[i],
arr_delay = flightneo$arr_delay[i],
carrier = flightneo$carrier[i],
tailnum = flightneo$tailnum[i],
flight = flightneo$flight[i],
air_time = flightneo$air_time[i],
distance = flightneo$distance[i],
hour = flightneo$hour[i],
minute = flightneo$minute[i],
id = flightneo$id[i]
)
}
commit(fn)
print("All done!")
View(flights)
View(flights)
library(RMySQL)
library(RNeo4j)
library(dplyr)
con <- dbConnect(RMySQL::MySQL(),
dbname = "flights",
host = "localhost",
port = 3306,
user = "root",
password = "Espiti@1")
table_names <- dbListTables(con)
query <- "SELECT * FROM flights
WHERE tailnum is not null"
flights <- dbReadTable(con, query)
flights <- mutate(flights, id = as.numeric(rownames(flights)))
##flights <- subset(flights, select = c(flights$id,flights$tailnum, flights$flight, flights$tailnum, flights$dest, flights$origin))
write.csv(flights, file='flights.csv', row.names=FALSE)
dbDisconnect(con)
path <- ("/Users/cesarespitia/Documents/CUNYMSDA/Data 607/CUNYDATA607/Week 13/flights.csv")
con<- file(path, open="r")
flightneo<- read.csv(con, header=TRUE, stringsAsFactors = FALSE)
close(con)
head(flightneo)
graph = startGraph("http://localhost:7474/db/data/", username="neo4j", password="Espiti@1")
clear(graph, input = FALSE)
addConstraint(graph, "PlaneID", "tailnum")
addConstraint(graph, "flightno","flights")
#using import guide from neo4j
query = "
MERGE (:origin {name:{origin}})
MERGE (:dest {year:{dest}})
MERGE (:counts {year:{year},month:{month},day:{day},dep_time:{dep_time},dep_delay:{dep_delay},
arr_time:{arr_time},arr_delay:{arr_delay},carrier:{carrier},tailnum:{tailnum},
flight:{flight},origin:{origin},dest:{dest},air_time:{air_time},distance:{distance},
hour:{hour},minute:{minute},id:{id}})
"
fn = newTransaction(graph)
for (i in 1:nrow(flightneo)) {
# Upload in blocks of 1000.
if(i %% 1000 == 0) {
# Commit current transaction.
commit(fn)
# Open new transaction.
fn = newTransaction(graph)
}
# Append paramaterized Cypher query to transaction.
appendCypher(fn,
query,
origin = flightneo$origin[i],
dest = flightneo$dest[i],
year = flightneo$year[i],
month = flightneo$month[i],
day = flightneo$day[i],
dep_time = flightneo$dep_time[i],
dep_delay = flightneo$dep_delay[i],
arr_time = flightneo$arr_time[i],
arr_delay = flightneo$arr_delay[i],
carrier = flightneo$carrier[i],
tailnum = flightneo$tailnum[i],
flight = flightneo$flight[i],
air_time = flightneo$air_time[i],
distance = flightneo$distance[i],
hour = flightneo$hour[i],
minute = flightneo$minute[i],
id = flightneo$id[i]
)
}
commit(fn)
print("All done!")
library(RMySQL)
library(RNeo4j)
library(dplyr)
con <- dbConnect(RMySQL::MySQL(),
dbname = "flights",
host = "localhost",
port = 3306,
user = "root",
password = "Espiti@1")
table_names <- dbListTables(con)
query <- "SELECT * FROM flights
WHERE tailnum is not null"
flights <- dbReadTable(con, query)
flights <- mutate(flights, id = as.numeric(rownames(flights)))
flights[is.na(flights)]<-0
library(RMySQL)
library(RNeo4j)
library(dplyr)
con <- dbConnect(RMySQL::MySQL(),
dbname = "flights",
host = "localhost",
port = 3306,
user = "root",
password = "Espiti@1")
table_names <- dbListTables(con)
query <- "SELECT * FROM flights
WHERE tailnum is not null"
flights <- dbReadTable(con, query)
library(RMySQL)
library(RNeo4j)
library(dplyr)
con <- dbConnect(RMySQL::MySQL(),
dbname = "flights",
host = "localhost",
port = 3306,
user = "root",
password = "Espiti@1")
table_names <- dbListTables(con)
query <- "SELECT * FROM flights WHERE tailnum is not null"
dbReadTable(con, query)
table_names <- dbListTables(con)
flights <- dbReadTable(con, "flights")
flights <- mutate(flights, id = as.numeric(rownames(flights)))
flights[is.na(flights)]<-0
write.csv(flights, file='flights.csv', row.names=FALSE)
dbDisconnect(con)
path <- ("/Users/cesarespitia/Documents/CUNYMSDA/Data 607/CUNYDATA607/Week 13/flights.csv")
con<- file(path, open="r")
flightneo<- read.csv(con, header=TRUE, stringsAsFactors = FALSE)
close(con)
head(flightneo)
graph = startGraph("http://localhost:7474/db/data/", username="neo4j", password="Espiti@1")
clear(graph, input = FALSE)
addConstraint(graph, "PlaneID", "tailnum")
addConstraint(graph, "flightno","flights")
#using import guide from neo4j
query = "
MERGE (:origin {name:{origin}})
MERGE (:dest {year:{dest}})
MERGE (:counts {year:{year},month:{month},day:{day},dep_time:{dep_time},dep_delay:{dep_delay},
arr_time:{arr_time},arr_delay:{arr_delay},carrier:{carrier},tailnum:{tailnum},
flight:{flight},origin:{origin},dest:{dest},air_time:{air_time},distance:{distance},
hour:{hour},minute:{minute},id:{id}})
"
fn = newTransaction(graph)
for (i in 1:nrow(flightneo)) {
# Upload in blocks of 1000.
if(i %% 1000 == 0) {
# Commit current transaction.
commit(fn)
# Open new transaction.
fn = newTransaction(graph)
}
# Append paramaterized Cypher query to transaction.
appendCypher(fn,
query,
origin = flightneo$origin[i],
dest = flightneo$dest[i],
year = flightneo$year[i],
month = flightneo$month[i],
day = flightneo$day[i],
dep_time = flightneo$dep_time[i],
dep_delay = flightneo$dep_delay[i],
arr_time = flightneo$arr_time[i],
arr_delay = flightneo$arr_delay[i],
carrier = flightneo$carrier[i],
tailnum = flightneo$tailnum[i],
flight = flightneo$flight[i],
air_time = flightneo$air_time[i],
distance = flightneo$distance[i],
hour = flightneo$hour[i],
minute = flightneo$minute[i],
id = flightneo$id[i]
)
}
library(RMySQL)
library(RNeo4j)
library(dplyr)
con <- dbConnect(RMySQL::MySQL(),
dbname = "flights",
host = "localhost",
port = 3306,
user = "root",
password = "Espiti@1")
table_names <- dbListTables(con)
flights <- dbReadTable(con, "flights")
flights <- mutate(flights, id = as.numeric(rownames(flights)))
flights[is.na(flights)]<-0
dim(flights)
flights[,1:1000]
flights[1:1000,]
flights <- dbReadTable(con, "flights")
flights <- mutate(flights, id = as.numeric(rownames(flights)))
flights[is.na(flights)]<-0
flights <- flights[1:10000,]
write.csv(flights, file='flights.csv', row.names=FALSE)
dbDisconnect(con)
path <- ("/Users/cesarespitia/Documents/CUNYMSDA/Data 607/CUNYDATA607/Week 13/flights.csv")
con<- file(path, open="r")
flightneo<- read.csv(con, header=TRUE, stringsAsFactors = FALSE)
close(con)
head(flightneo)
graph = startGraph("http://localhost:7474/db/data/", username="neo4j", password="Espiti@1")
clear(graph, input = FALSE)
addConstraint(graph, "PlaneID", "tailnum")
addConstraint(graph, "flightno","flights")
#using import guide from neo4j
query = "
MERGE (:origin {name:{origin}})
MERGE (:dest {year:{dest}})
MERGE (:counts {year:{year},month:{month},day:{day},dep_time:{dep_time},dep_delay:{dep_delay},
arr_time:{arr_time},arr_delay:{arr_delay},carrier:{carrier},tailnum:{tailnum},
flight:{flight},origin:{origin},dest:{dest},air_time:{air_time},distance:{distance},
hour:{hour},minute:{minute},id:{id}})
"
fn = newTransaction(graph)
for (i in 1:nrow(flightneo)) {
# Upload in blocks of 1000.
if(i %% 1000 == 0) {
# Commit current transaction.
commit(fn)
# Open new transaction.
fn = newTransaction(graph)
}
# Append paramaterized Cypher query to transaction.
appendCypher(fn,
query,
origin = flightneo$origin[i],
dest = flightneo$dest[i],
year = flightneo$year[i],
month = flightneo$month[i],
day = flightneo$day[i],
dep_time = flightneo$dep_time[i],
dep_delay = flightneo$dep_delay[i],
arr_time = flightneo$arr_time[i],
arr_delay = flightneo$arr_delay[i],
carrier = flightneo$carrier[i],
tailnum = flightneo$tailnum[i],
flight = flightneo$flight[i],
air_time = flightneo$air_time[i],
distance = flightneo$distance[i],
hour = flightneo$hour[i],
minute = flightneo$minute[i],
id = flightneo$id[i]
)
}
